package org.a2cd.boot.controller;

import lombok.AllArgsConstructor;
import lombok.extern.slf4j.Slf4j;
import org.a2cd.boot.consts.RedisKey;
import org.redisson.api.RedissonClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.data.redis.connection.stream.ReadOffset;
import org.springframework.data.redis.connection.stream.StreamRecords;
import org.springframework.data.redis.core.StringRedisTemplate;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

import java.util.Map;

/**
 * @author a2cd
 * @since 2024-01-04
 */

@Slf4j
@RestController
@RequestMapping("/redis")
@AllArgsConstructor
public class RedisProducer {

    @Autowired
    private RedissonClient redissonClient;
    @Autowired
    private StringRedisTemplate stringRedisTemplate;

    @GetMapping("/xgroup/create")
    public String xGroupCreate() {
        return "hello";
    }

    @GetMapping("/blockList/produce/{msg}")
    public String produceMsgIntoBlockList(@PathVariable String msg) {
        stringRedisTemplate.opsForList().leftPush(RedisKey.BLOCK_LIST, msg);
        return "hello";
    }

    @GetMapping("/blockingQueue/produce/{msg}")
    public String produceMsgIntoBlockingQueue(@PathVariable String msg) {
        var blockingDeque = redissonClient.getBlockingDeque(RedisKey.BLOCK_QUEUE);
        try {
            blockingDeque.putFirst(msg);
            log.info("将消息: {} 插入到队列。", msg);
        } catch (Exception e) {
            log.error("err: ", e);
        }
        return "hello";
    }


    @GetMapping("/stream/group/create/{streamName}/{group}")
    public String createGroup(@PathVariable String streamName, @PathVariable String group) {
        var opts = stringRedisTemplate.opsForStream();
        // 创建一个流
        try {
            opts.createGroup(streamName, ReadOffset.from("0"), group);
        } catch (Exception e) {
            // 流可能已存在，忽略异常
        }
        return "hello";
    }

    @GetMapping("/stream/produce/{stream}/{msg}")
    public String produceMsgIntoStream(@PathVariable String stream, @PathVariable String msg) {
        // 创建消息记录, 以及指定stream
        var strRecord = StreamRecords.string(Map.of("name", msg)).withStreamKey(stream);
        var recordId = stringRedisTemplate.opsForStream().add(strRecord);

        // 是否是自动生成的
        var autoGenerated = recordId.shouldBeAutoGenerated();
        // id值
        var value = recordId.getValue();
        // 序列号部分
        var sequence = recordId.getSequence();
        // 时间戳部分
        var timestamp = recordId.getTimestamp();
        return "hello";
    }
}
